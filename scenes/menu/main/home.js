const { Scenes, Markup, session } = require("telegraf");
const path = require('path');

const scenes = require('../../scenes');
const db = require('../../../database/database');

const User = require('../../../models/user');
const Meal = require('../../../models/meal');

// ______________________________________________

// Markup keyboard keys text
const keys = {
    makeReport: 'üìÖ –°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç',
    mealPlan: 'ü•ë –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è',
    info: '‚ùî –°–ø—Ä–∞–≤–∫–∞',
    meals: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è',
    data: 'üìÉ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
};

// Markup keyboard keys iselves
const keyboard = Markup.keyboard(
    [
        [ keys.makeReport ],
        [ keys.mealPlan, keys.info ],
        [ keys.meals, keys.data ],
    ]
).resize();

const infoKeyboard = require('./info').inlineKeyboard;

// ____________________________________________________________

const scene = new Scenes.BaseScene(scenes.id.menu.main);

scene.hears(keys.meals, ctx => {
    return ctx.scene.enter(scenes.id.setter.meals);
})

scene.hears(keys.data, ctx => {
    return ctx.scene.enter(scenes.id.menu.changeData.home);
});

// - - - - - - - - - - - - - - - - - - - - -

// sending checkIn request if it's time
scene.on('message', async (ctx, next) => {

    const user = await User.findById(ctx.from.id);

    const markup = Markup.inlineKeyboard(
        [
            Markup.button.callback('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', `CHECK_IN_ACTION`),
        ],
    );

    if (!user) return next();
    if (!(user.checked.bool)) {
        setTimeout(() => ctx.reply('–ú—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏ –∑–∞–º–µ—Ä—ã',
            markup), 800);
    }

    return next();
});

// - - - - - - - - - - - - - - - - - - - - -

scene.enter(async ctx => {
    try {
        // if the bot was rebooted and the session is now empty
        if (ctx.session.recoveryMode == true) {
            try {
                // handles the update according to scene mdlwres
                ctx.session.recoveryMode = false;
                return ctx.handleRecovery(scene, ctx);
            } catch (e) {
                throw new Error(`Error on handling recovery: ${e.message} \n`);
            }
        }
        const userID = ctx.from.id;
        db.setUserState(userID, scenes.id.menu.main);
        
        const user = await db.getUserByID(userID);
        
        let text = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${user.name}!`;
        let today = new Date();
        let days = [
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            '–≤—Ç–æ—Ä–Ω–∏–∫',
            '—Å—Ä–µ–¥–∞',
            '—á–µ—Ç–≤–µ—Ä–≥',
            '–ø—è—Ç–Ω–∏—Ü–∞',
            '—Å—É–±–±–æ—Ç–∞',
        ]
        text += `\n–°–µ–≥–æ–¥–Ω—è ${days[today.getDay()]}`;

        text += `\n–í–∞—à –ø–æ–ª: ${user.sex.toLowerCase()}`;
        text += `\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ${user.age}`; 
        text += `\n–í–∞—à —Ä–æ—Å—Ç: ${user.height}`;

        text += '\n\n–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —É –í–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! \n–í—Å—ë –≤ –í–∞—à–∏—Ö —Ä—É–∫–∞—Ö, –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!\n';

        text += `\n–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: ${user.startWeight} –∫–≥`;
        text += `\n–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${user.currentWeight} –∫–≥`;
        text += `\n–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: ${user.targetWeight} –∫–≥`;

        text += `\n–ó–∞–º–µ—Ä—ã (–ì/–¢/–ë): ${user.chestMeasure}/${user.waistMeasure}/${user.hipMeasure} —Å–º`;
        text += `\n–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è: ${user.mealsPerDay} —Ä/–¥–µ–Ω—å`;

        const photoSource = path.join(process.env.IMAGES_DIR, 'main-menu.jpg'); 

        return ctx.replyWithPhoto(
            { source: photoSource },
            {
                caption: text,
                ...keyboard,
            },
        );
    } catch (e) {
        throw new Error(`Error in <enter> middleware of <scenes/menu/main/home> file --> ${e.message}`);
    }
});

// ______________________________________________________________

scene.hears(keys.makeReport, ctx => {

    const reportKeybord = Markup.inlineKeyboard(
        [
            Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', `${process.env.WEB_APP_URL}?user=${ctx.from.id}`),
        ],
    );
    
    try {
        return ctx.reply('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º', 
        reportKeybord);
    } catch (e) {
        throw new Error(`Error in <hears_makeReport> middleware of <scenes/menu/main/home> file --> ${e.message}`);
    }
});

const axios = require('axios').default;
const groupAtoi = {
    'proteins': 0,
    'fats': 1,
    'carbons': 2
};
scene.hears(keys.mealPlan, async ctx => {
    try {

        // get the report object from web-app
        const response = await axios.get(`http://${process.env.WEB_APP_URL}?user=${ctx.from.id}&bot=1`);
        if (response.status !== 200) throw new Error(`Error on fetching report from web-app: ${response.statusText}`);
        const report = response.data;

        // get all the meals from DB
        const mealsData = await Meal.find({ $or: [ { group: 'proteins' }, { group: 'fats' }, { group: 'carbons' } ] });

        // generate text
        let text = `–í–∞—à–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${report.calories.target} –∫–∞–ª</b> \n\n`;
        text += '–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (–ë–ñ–£). '
            + '–ü—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ä–∞—Ü–∏–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü; –≤ –∫–∞–∂–¥–æ–º –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—Ä—Ü–∏—è –≤ –≥—Ä–∞–º–º–∞—Ö, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –í–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. \n\n';

        // if mealsPerDay !== 3, we have to add lunch to plan
        // otherway, we don't need it
        let tabs = [report.tabs[0]];
        if (report.mealsPerDay > 3) {
            tabs.push(report.tabs[1]);
        }
        else {
            tabs.push(null);
        }
        tabs.push(report.tabs[2]);
        tabs.push(report.tabs[4]);

        const tabNames = ['–ó–∞–≤—Ç—Ä–∞–∫', '–ü–µ—Ä–µ–∫—É—Å', '–û–±–µ–¥', '–£–∂–∏–Ω'];
        for (let i in tabs) {
            // skip the empty tab
            if (!(tabs[i])) continue;

            // header
            text += `  <b>${tabNames[i]}:</b>` + '\n';

            // for all the meals
            for (let food of mealsData) {
                // if this food included to tab, calc and add
                if (food.plan[i]) {
                    // this food's nutrient object
                    const nutrient = tabs[i].nutrients[ groupAtoi[food.group] ];
                    // weight to be eaten
                    const weight = nutrient.calories.target / food.calories;

                    text += `‚Ä¢ <i>${food.name}</i> - `;

                    // EGGS EGGS: if this food is egg, should be added count but not weight
                    // count 1 egg equal 100g
                    if (`${food._id.toString()}` == '62698bacaec76b49a8b91712') {
                        text += `${(weight / 100).toFixed()} —à—Ç | ${(food.calories * 100).toFixed()} –∫–∞–ª –Ω–∞ 1 —à—Ç`;
                    }
                    else {
                        text += `${(weight).toFixed()}–≥ | ${(food.calories * 100).toFixed()} –∫–∞–ª –Ω–∞ 100–≥`;
                    }

                    text += '\n';
                }
            }
            text += '\n';
        }

        return ctx.replyWithHTML(text);
    } catch (e) {
        throw new Error(`Error in <hears_mealPlan> middleware of <scenes/menu/main/home> file --> ${e.message}`);
    }
});

scene.use(require('./info').composer);
scene.hears(keys.info, ctx => {

    try {
        let text = '';
        text += '1Ô∏è‚É£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º? \n\n';
        text += '2Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫? \n\n';
        text += '3Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–µ–¥? \n\n';
        text += '4Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É–∂–∏–Ω? \n\n';
        text += '5Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å? \n\n';
        text += '6Ô∏è‚É£ –ö–æ–≥–¥–∞ –µ—Å—Ç—å –∏ –∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å? \n\n';
        text += '7Ô∏è‚É£ –ö–∞–∫ –ø–∏—Ç—å –∏ —á—Ç–æ —Å –æ–≤–æ—â–∞–º–∏? \n\n';

        return ctx.reply(text, infoKeyboard);
    } catch (e) {
        throw new Error(`Error in <hears_info> middleware of <scenes/menu/main/home> file --> ${e.message}`);
    }
});

scene.on('message', (ctx, next) => {
    // if it's a command
    if (ctx.message.text[0] == '/') return next(); 
    else return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—É—Ç—É—Ä—É –º–µ–Ω—é');
});

// __________________________________________________

module.exports = scene;
