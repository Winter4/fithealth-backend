const { Composer, Markup } = require("telegraf");
const path = require("path");

const User = require("../../../services/user.service");
const { getToday } = require("../../../utils/utils");
const stepsCounter = require("../../setters/steps.counter");

const scene = new Composer();

// - - - - - - - - - - - - - - - - - - - - - - - - //

// Markup keyboard keys text
const keys = {
  makeReport: "üìÖ –°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç",
  mealPlan: "ü•ë –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è",
  info: "‚ùî –°–ø—Ä–∞–≤–∫–∞",
  meals: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è",
  data: "üìÉ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
};

// Markup keyboard keys iselves
const keyboard = Markup.keyboard([
  [keys.makeReport],
  [keys.mealPlan, keys.info],
  [keys.meals, keys.data],
]).resize();

const SCENE_ID = "MAIN_MENU";

// - - - - - - - - - - - - - - - - - - - - - - - - //

function generateText(user) {
  let text = "";

  text += `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${user.name}! \n`;
  text += `–°–µ–≥–æ–¥–Ω—è ${getToday()} \n`;
  text += `\n–í–∞—à –ø–æ–ª: ${user.sex.toLowerCase()}`;
  text += `\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ${user.age}`;
  text += `\n–í–∞—à —Ä–æ—Å—Ç: ${user.height} —Å–º`;

  text +=
    "\n\n–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —É –í–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! \n–í—Å—ë –≤ –í–∞—à–∏—Ö —Ä—É–∫–∞—Ö, –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!\n";

  text += `\n–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: ${user.startWeight} –∫–≥`;
  text += `\n–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${user.currentWeight} –∫–≥`;
  text += `\n–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: ${user.targetWeight} –∫–≥`;

  text += `\n–ó–∞–º–µ—Ä—ã (–ì/–¢/–ë): ${user.chestMeasure}/${user.waistMeasure}/${user.hipMeasure} —Å–º`;
  text += `\n–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è: ${user.mealsPerDay} —Ä/–¥–µ–Ω—å`;

  return text;
}

async function enter(ctx) {
  try {
    // update state
    await User.set.state(ctx.chat.id, SCENE_ID);

    const photoSource = path.join(process.env.IMAGES_DIR, "main-menu.jpg");
    return ctx.replyWithPhoto(
      { source: photoSource },
      {
        caption: generateText(await User.get.object(ctx.chat.id)),
        ...keyboard,
      }
    );
  } catch (e) {
    throw new Error(
      `Error in <enter> middleware of <main.menu> scene --> ${e.message}`
    );
  }
}

scene.hears(keys.makeReport, (ctx) => {
  const reportKeyboard = Markup.inlineKeyboard([
    [
      Markup.button.url(
        "–û—Ç—á—ë—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é",
        `${process.env.WEB_APP_URL}?user=${ctx.from.id}`
      ),
    ],
    [Markup.button.callback("–û—Ç—á—ë—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤", "STEPS_ACTION")],
  ]);

  try {
    return ctx.reply(
      "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –í–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–º–∏–Ω—É–µ–º–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π!",
      reportKeyboard
    );
  } catch (e) {
    throw new Error(
      `Error in <hears_makeReport> middleware of <main.menu> scene --> ${e.message}`
    );
  }
});
scene.action("STEPS_ACTION", (ctx) => {
  ctx.answerCbQuery();
  return stepsCounter.enter(ctx);
});

scene.use(require("./info.handler.menu.main").middleware);
const { infoKeyboard } = require("./info.handler.menu.main");
scene.hears(keys.info, (ctx) => {
  try {
    let text = "";
    text += "1Ô∏è‚É£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º? \n\n";
    text += "2Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫? \n\n";
    text += "3Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–µ–¥? \n\n";
    text += "4Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É–∂–∏–Ω? \n\n";
    text += "5Ô∏è‚É£ –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å? \n\n";
    text += "6Ô∏è‚É£ –ö–æ–≥–¥–∞ –µ—Å—Ç—å –∏ –∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å? \n\n";
    text += "7Ô∏è‚É£ –ö–∞–∫ –ø–∏—Ç—å –∏ —á—Ç–æ —Å –æ–≤–æ—â–∞–º–∏? \n\n";

    return ctx.reply(text, infoKeyboard);
  } catch (e) {
    throw new Error(
      `Error in <hears_info> middleware of <main.menu> scene --> ${e.message}`
    );
  }
});

const { generateMealPlan } = require("../../../utils/utils");
scene.hears(keys.mealPlan, async (ctx) => {
  try {
    const text = await generateMealPlan(ctx.chat.id);

    return ctx.replyWithHTML(text);
  } catch (e) {
    throw new Error(
      `Error in <hears_mealPlan> middleware of <main.menu> scene --> ${e.message}`
    );
  }
});

scene.on("message", (ctx) => {
  return ctx.reply("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É?");
});

// - - - - - - - - - - - - - - - - - - - - - - - - //

module.exports = {
  id: SCENE_ID,
  enter,
  middleware: scene,
};
