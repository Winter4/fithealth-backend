import { Composer, InlineKeyboard, Keyboard } from "grammy";
import type { CustomContext } from "@bot/types";
import { enter as enterEditMenu } from "./edit-menu.scene";
import { getUserInfo, infoText } from "./scene-tools";

export const sceneId = "MAIN_MENU";

// alias = value
enum mainMenuKeys {
  "–ú–æ—ë –ø–∏—Ç–∞–Ω–∏–µ" = "ü•¶ –ú–æ—ë –ø–∏—Ç–∞–Ω–∏–µ",
  "–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è" = "üìä –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è",
  "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" = "üóí –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
  "–°–ø—Ä–∞–≤–∫–∞" = "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞",
}
const mainMenuMarkup = {
  keys: mainMenuKeys,
  keyboard: new Keyboard()
    .text(mainMenuKeys["–ú–æ—ë –ø–∏—Ç–∞–Ω–∏–µ"])
    .text(mainMenuKeys["–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è"])
    .row()
    .text(mainMenuKeys["–°–ø—Ä–∞–≤–∫–∞"])
    .text(mainMenuKeys["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"])
    .row()
    .resized(),
};

// - - - - - - - //

export async function enter(ctx: CustomContext) {
  await ctx.cache.update(ctx.from!.id.toString(), { scene: sceneId });

  const userInfo = await getUserInfo(ctx);

  return ctx.reply("‚õ© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n\n" + userInfo, {
    reply_markup: mainMenuMarkup.keyboard,
  });
}

// - - - - - - - //

const mainMenu = new Composer<CustomContext>();

mainMenu.hears(mainMenuKeys["–ú–æ—ë –ø–∏—Ç–∞–Ω–∏–µ"], async (ctx: CustomContext) => {
  const user = await ctx.db.user.findUnique({
    where: { tg_id: ctx.from!.id.toString() },
    select: { uuid: true },
  });
  if (!user) throw new Error(`Can't find User TG ID = ${ctx.from!.id}`);

  return ctx.reply("–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", {
    reply_markup: new InlineKeyboard().url(
      "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è",
      `${ctx.config.frontendUrl}/user/${user.uuid}`
    ),
  });
});

mainMenu.hears(mainMenuKeys["–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è"], async (ctx: CustomContext) => {
  return ctx.reply("–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è");
});

mainMenu.hears(mainMenuKeys["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"], async (ctx: CustomContext) => {
  return enterEditMenu(ctx);
});

mainMenu.hears(mainMenuKeys["–°–ø—Ä–∞–≤–∫–∞"], async (ctx: CustomContext) => {
  return ctx.reply(infoText);
});

export default mainMenu;
