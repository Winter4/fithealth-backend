import { Composer, Keyboard } from "grammy";
import type { CustomContext } from "@src/context";

export const sceneId = "SET_SEX";

// alias = value
enum setSexKeys {
  "–ú—É–∂—Å–∫–æ–π" = "üöπ –ú—É–∂—Å–∫–æ–π",
  "–ñ–µ–Ω—Å–∫–∏–π" = "üö∫ –ñ–µ–Ω—Å–∫–∏–π",
}
const markup = {
  keys: setSexKeys,
  keyboard: new Keyboard()
    .text(setSexKeys.–ú—É–∂—Å–∫–æ–π)
    .text(setSexKeys.–ñ–µ–Ω—Å–∫–∏–π)
    .row()
    .resized(),
};

// - - - - - - - //

export async function enter(ctx: CustomContext) {
  await ctx.db.state.update({
    where: { user_tg_id: ctx.from!.id.toString() },
    data: { scene: sceneId },
  });
  return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª", {
    reply_markup: markup.keyboard,
  });
}

// - - - - - - - //

const setSex = new Composer<CustomContext>();

setSex.hears(setSexKeys["–ú—É–∂—Å–∫–æ–π"], async (ctx: CustomContext) => {
  return ctx.reply("–ú—É–∂—Å–∫–æ–π");
});

setSex.hears(setSexKeys["–ñ–µ–Ω—Å–∫–∏–π"], async (ctx: CustomContext) => {
  return ctx.reply("–ñ–µ–Ω—Å–∫–∏–π");
});

/*
setSex.hears(backKey, async (ctx: CustomContext) => {
  return ctx.reply("–ù–∞–∑–∞–¥");
});
*/

export default setSex;
