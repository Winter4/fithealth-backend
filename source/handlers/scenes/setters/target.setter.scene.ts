import { Composer, Keyboard, NextFunction } from "grammy";
import type { CustomContext } from "@src/context";
import { enter as enterEditMenu } from "../edit-menu.scene";
import { enter as enterMainMenu } from "../main-menu.scene";
import { Target } from "@prisma/client";
import { calcCaloriesMiddleware } from "../scene-tools";

export const sceneId = "SET_TARGET";

// alias = value
enum setTargetKeys {
  "–ü–æ—Ö—É–¥–µ–Ω–∏–µ" = "üîΩ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
  "–£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞" = "üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
  "–ù–∞–±–æ—Ä –≤–µ—Å–∞" = "üîº –ù–∞–±–æ—Ä –≤–µ—Å–∞",
}
const markup = {
  keys: setTargetKeys,
  keyboard: new Keyboard()
    .text(setTargetKeys.–ü–æ—Ö—É–¥–µ–Ω–∏–µ)
    .text(setTargetKeys["–£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"])
    .text(setTargetKeys["–ù–∞–±–æ—Ä –≤–µ—Å–∞"])
    .row()
    .resized(),
};

// - - - - - - - //

export async function enter(ctx: CustomContext) {
  await ctx.cache.update(ctx.from!.id.toString(), { scene: sceneId });
  return ctx.reply("‚ú¥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É —Ü–µ–ª—å", {
    reply_markup: markup.keyboard,
  });
}

// - - - - - - - //

const setTarget = new Composer<CustomContext>();

function body(target: Target) {
  return async (ctx: CustomContext, next: NextFunction) => {
    await ctx.db.user.update({
      where: { tg_id: ctx.from!.id.toString() },
      data: { target },
    });

    // update state
    await ctx.cache.update(ctx.from!.id.toString(), { registered: true });

    return next();
  };
}

function router(ctx: CustomContext) {
  if (ctx.state.registered) return enterEditMenu(ctx);
  else return enterMainMenu(ctx);
}

setTarget.hears(setTargetKeys.–ü–æ—Ö—É–¥–µ–Ω–∏–µ, body("LOSE"), calcCaloriesMiddleware, router);

setTarget.hears(
  setTargetKeys["–£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"],
  body("KEEP"),
  calcCaloriesMiddleware,
  router
);

setTarget.hears(
  setTargetKeys["–ù–∞–±–æ—Ä –≤–µ—Å–∞"],
  body("GAIN"),
  calcCaloriesMiddleware,
  router
);

/*
setSex.hears(backKey, async (ctx: CustomContext) => {
  return ctx.reply("–ù–∞–∑–∞–¥");
});
*/

export default setTarget;
